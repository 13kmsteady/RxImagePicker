apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def siteUrl = 'https://github.com/qingmei2/RxImagePicker'
def gitUrl = 'https://github.com/qingmei2/RxImagePicker.git'

group = "com.github.qingmei2"
def libName = "RxImagePicker"
version = "0.1.0-alpha"

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = libName
        licenses = ["MIT"]
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        publish = true

        version {
            name = rootProject.ext.android["versionName"]
            desc = 'A common Architecture for Android Applications developing based on MVPï¼Œintegrates many Open Source Projects( like Dagger2,RxJava,Retrofit... ),to make your developing quicker and easier.'
            released = new Date()
            vcsTag = 'v' + rootProject.ext.android["versionName"]
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name libName
                description 'The library which choosing pictures from camera or gallery in Android.'
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://github.com/qingmei2/RxImagePicker/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id 'qingmei2'
                        name 'qingmei2'
                        email 'mq2553299@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
